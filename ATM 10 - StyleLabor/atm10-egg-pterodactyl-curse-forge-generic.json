{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "update_url": null,
    "version": "PTDL_v2"
  },
  "exported_at": "2024-06-01T19:39:54+00:00",
  "name": "CurseForge - ATM10 - Markap",
  "author": "stylelabor+markap@gmail.com",
  "description": "A generic egg for the ATM 10 CurseForge modpack.",
  "features": [
    "eula",
    "java_version",
    "pid_limit"
  ],
  "docker_images": {
    "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
    "Java 18": "ghcr.io/pterodactyl/yolks:java_18",
    "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
    "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
    "Java 14": "ghcr.io/pterodactyl/yolks:java_14",
    "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
    "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
  },
  "file_denylist": [],
  "startup": "java $([[ -f user_jvm_args.txt ]] \u0026\u0026 printf %s \"@user_jvm_args.txt\") -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true $([[ ! -f unix_args.txt ]] \u0026\u0026 printf %s \"-jar `cat .serverjar`\" || printf %s \"@unix_args.txt\")",
  "config": {
    "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
    "logs": "{}",
    "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
    "stop": "stop"
  },
  "scripts": {
    "installation": {
      "container": "openjdk:8-jdk-slim",
      "entrypoint": "bash",
      "script": "#!/bin/bash\n# shellcheck disable=SC2155\n#\n# CurseForge Installation Script\n#\n# Server Files: /mnt/server\n\n: \"${SERVER_DIR:=/mnt/server}\"\n: \"${PROJECT_ID:=}\"\n: \"${VERSION_ID:=}\"\n: \"${API_KEY:=}\"\n\nif [[ ! -d $SERVER_DIR ]]; then\n    mkdir -p \"$SERVER_DIR\"\nfi\n\nif ! cd \"$SERVER_DIR\"; then\n    echo -e \"Failed to change directory to ${SERVER_DIR}\"\n    exit 1\nfi\n\nfunction install_required {\n    echo -e \"Installing required packages...\"\n    echo -e \"\\tRunning apt update\"\n    apt update > /dev/null 2>&1 || { echo \"apt update failed!\"; exit 1; }\n    echo -e \"\\tRunning apt install\"\n    apt install -y wget jq unzip curl > /dev/null 2>&1 || { echo \"apt install failed!\"; exit 1; }\n}\n\nCURSEFORGE_API_URL=\"https://api.curseforge.com/v1/mods/\"\nCURSEFORGE_API_HEADERS=(\"--header=Accept: application/json\" \"--header=x-api-key: ${API_KEY}\")\n\nfunction get_download {\n    echo -e \"Retrieving CurseForge project information...\"\n    local PROJECT_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}\" -O -)\n    local PROJECT_TITLE=$(echo \"$PROJECT_DATA\" | jq -r '.data.name // empty')\n\n    if [[ -z \"${PROJECT_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve project data for project id '${PROJECT_ID}'\"\n        exit 1\n    fi\n\n    local IS_SERVER_PACK=false\n\n    if [[ -z \"${VERSION_ID}\" || \"${VERSION_ID}\" == \"latest\" ]]; then\n        echo -e \"\\tNo file ID specified, using latest file\"\n        VERSION_ID=$(echo \"$PROJECT_DATA\" | jq -r '.data.mainFileId // empty')\n\n        local VERSION_SERVER_PACK=\"$(echo -e \"${PROJECT_DATA}\" | jq -r --arg VERSION_ID \"$VERSION_ID\" '.data.latestFiles[] | select(.id|tostring==$VERSION_ID) | .isServerPack')\"\n        local VERSION_SERVER_ID=\"$(echo -e \"${PROJECT_DATA}\" | jq -r --arg VERSION_ID \"$VERSION_ID\" '.data.latestFiles[] | select(.id|tostring==$VERSION_ID) | .serverPackFileId')\"\n\n        if [[ \"${VERSION_SERVER_PACK}\" == \"false\" && -n \"${VERSION_SERVER_ID}\" ]]; then\n            echo -e \"\\tFound server pack file id '${VERSION_SERVER_ID}'\"\n            VERSION_ID=$VERSION_SERVER_ID\n            IS_SERVER_PACK=true\n        elif [[ \"${VERSION_SERVER_PACK}\" == \"true\" ]]; then\n            IS_SERVER_PACK=true\n        fi\n    else\n        echo -e \"\\tChecking if provided file id '${VERSION_ID}' exists\"\n\n        local FILE_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}\" -O -)\n\n        if [[ -z \"${FILE_DATA}\" ]]; then\n            echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n            exit 1\n        fi\n\n        IS_SERVER_PACK=$(echo -e \"${FILE_DATA}\" | jq -r '.data.isServerPack // \"false\"')\n\n        if [[ \"${IS_SERVER_PACK}\" == \"false\" ]]; then\n            local VERSION_SERVER_PACK=\"$(echo -e \"${FILE_DATA}\" | jq -r '.data.serverPackFileId // empty')\"\n            if [[ -n \"${VERSION_SERVER_PACK}\" ]]; then\n                echo -e \"\\tFound server pack file id '${VERSION_SERVER_PACK}'\"\n                VERSION_ID=$VERSION_SERVER_PACK\n                IS_SERVER_PACK=true\n            fi\n        else\n            IS_SERVER_PACK=true\n        fi\n    fi\n\n    # Check if version id is unset or empty string\n    if [[ -z \"${VERSION_ID}\" ]]; then\n        echo -e \"\\tERROR: No file id found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    if [[ \"${IS_SERVER_PACK}\" == \"false\" ]]; then\n        echo -e \"\\tWARNING: File id '${VERSION_ID}' is not a server pack, attempting to use client files\"\n    fi\n\n    # get json data to work with\n    echo -e \"\\tRetrieving version information for '${VERSION_ID}'\"\n    local JSON_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}/download-url\" -O -)\n\n    if [[ -z \"${JSON_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve file data for file id '${VERSION_ID}'\"\n        exit 1\n    fi\n\n    echo -e \"\\tParsing CurseForge pack download url\"\n\n    local DOWNLOAD_URL=$(echo -e \"$JSON_DATA\" | jq -r '.data // empty')\n    if [[ -z \"${DOWNLOAD_URL}\" ]]; then\n        echo -e \"\\tERROR: No download url found for file ${VERSION_ID}\"\n        exit 1\n    fi\n\n    # download modpack files\n    echo -e \"\\tDownloading ${DOWNLOAD_URL}\"\n    if ! wget -q \"${DOWNLOAD_URL}\" -O server.zip; then\n        echo -e \"Download failed!\"\n        exit 1\n    fi\n}\n\nfunction get_loader {\n    echo -e \"Retrieving loader information...\"\n\n    local PROJECT_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}\" -O -)\n    local PROJECT_TITLE=$(echo \"$PROJECT_DATA\" | jq -r '.data.name // empty')\n    if [[ -z \"${PROJECT_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve project data for project id '${PROJECT_ID}'\"\n        exit 1\n    fi\n\n    local FILE_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}\" -O -)\n\n    if [[ -z \"${FILE_DATA}\" ]]; then\n        echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    local IS_SERVER_PACK=$(echo -e \"${FILE_DATA}\" | jq -r '.data.isServerPack // \"false\"')\n    local CLIENT_VERSION_ID;\n\n    if [[ \"${IS_SERVER_PACK}\" == \"true\" ]]; then\n        CLIENT_VERSION_ID=\"$(echo -e \"${FILE_DATA}\" | jq -r '.data.parentProjectFileId // empty')\"\n    else\n        CLIENT_VERSION_ID=$VERSION_ID\n    fi\n\n    if [[ -z \"${CLIENT_VERSION_ID}\" ]]; then\n        echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    echo -e \"\\tRetrieving file information for '${CLIENT_VERSION_ID}'\"\n    local JSON_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${CLIENT_VERSION_ID}/download-url\" -O -)\n\n    echo -e \"\\tParsing CurseForge pack download url\"\n\n    local DOWNLOAD_URL=$(echo -e \"$JSON_DATA\" | jq -r '.data // empty')\n\n    if [[ -z \"${DOWNLOAD_URL}\" ]]; then\n        echo -e \"\\tERROR: No download url found for file id ${CLIENT_VERSION_ID}\"\n        exit 1\n    fi\n\n    # download modpack files\n    echo -e \"\\tDownloading ${DOWNLOAD_URL}\"\n    wget -q \"${DOWNLOAD_URL}\" -O client.zip\n\n    echo -e \"\\tUnpacking client manifest\"\n    unzip -jo client.zip manifest.json -d \"${SERVER_DIR}\"\n    mv \"${SERVER_DIR}/manifest.json\" \"${SERVER_DIR}/client.manifest.json\" # rename to avoid conflicts with main manifest\n    rm -rf client.zip\n\n    echo -e \"\\tParsing client manifest\"\n    local MANIFEST=\"${SERVER_DIR}/client.manifest.json\"\n\n    LOADER_ID=$(jq -r '.minecraft.modLoaders[]? | select(.primary == true) | .id' \"${MANIFEST}\")\n    LOADER_NAME=$(echo \"${LOADER_ID}\" | cut -d'-' -f1)\n    LOADER_VERSION=$(echo \"${LOADER_ID}\" | cut -d'-' -f2)\n\n    if [[ -z \"${LOADER_NAME}\" || -z \"${LOADER_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No loader found in client manifest!\"\n        exit 1\n    fi\n\n    MINECRAFT_VERSION=$(jq -r '.minecraft.version // empty' \"${MANIFEST}\")\n\n    if [[ -z \"${MINECRAFT_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No minecraft version found in client manifest!\"\n        exit 1\n    fi\n\n    echo -e \"\\tFound loader ${LOADER_NAME} ${LOADER_VERSION} for Minecraft ${MINECRAFT_VERSION}\"\n}\n\nfunction download_extra_mods {\n    echo \"Downloading extra mods...\"\n\n    local MODS_DIR=\"${SERVER_DIR}/mods\"\n    mkdir -p \"${MODS_DIR}\"\n\n    local NEOFORWARDING_URL=\"https://cdn.modrinth.com/data/Vbdanw1l/versions/tdpr4TRc/neoforwarding-1.3.0-1.21.X-NeoForge.jar\"\n    local WorldEdit_URL=\"https://cdn.modrinth.com/data/1u6JkXh5/versions/vBzkrSYP/worldedit-mod-7.3.6.jar\"\n    local LOGBEGONE_URL=\"https://cdn.modrinth.com/data/9ON3zv6e/versions/1CpHwmQd/logbegone-neo-1.21-1.0.2.jar\"\n\n    local DYNVIEW_URL=\"https://www.curseforge.com/api/v1/mods/366140/files/5570957/download\"\n    local Chunksending_URL=\"https://www.curseforge.com/api/v1/mods/831663/files/5540768/download\"\n    local BetterChunks_URL=\"https://www.curseforge.com/api/v1/mods/899487/files/5747092/download\"\n\n    echo \"Downloading NeoForwarding mod...\"\n    if ! wget -q -O \"${MODS_DIR}/neoforwarding-1.0.0-1.21-NeoForge.jar\" \"${NEOFORWARDING_URL}\"; then\n        echo \"Failed to download NeoForwarding mod.\"\n        exit 1\n    fi\n\n    echo \"Downloading WorldEdit mod...\"\n    if ! wget -q -O \"${MODS_DIR}/worldedit-mod-7.3.6.jar\" \"${WorldEdit_URL}\"; then\n        echo \"Failed to download World Edit mod.\"\n        exit 1\n    fi\n\n    echo \"Downloading Log Begone mod...\"\n    if ! wget -q -O \"${MODS_DIR}/logbegone-neo-1.21-1.0.2.jar\" \"${LOGBEGONE_URL}\"; then\n        echo \"Failed to download Log Begone mod.\"\n        exit 1\n    fi\n\n    echo \"[PERFORMANCE MOD] Downloading Dynview mod...\"\n    if ! wget -q -O \"${MODS_DIR}/dynview.jar\" \"${DYNVIEW_URL}\"; then\n        echo \"Failed to download Dynview mod.\"\n        exit 1\n    fi\n\n    echo \"[PERFORMANCE MOD] Downloading Chunksending mod...\"\n    if ! wget -q -O \"${MODS_DIR}/chunksending.jar\" \"${Chunksending_URL}\"; then\n        echo \"Failed to download Chunksending mod.\"\n        exit 1\n    fi\n\n    echo \"[PERFORMANCE MOD] Downloading BetterChunks mod...\"\n    if ! wget -q -O \"${MODS_DIR}/betterchunks.jar\" \"${BetterChunks_URL}\"; then\n        echo \"Failed to download BetterChunks mod.\"\n        exit 1\n    fi\n}\nfunction unzip-strip() (\n    set -u\n\n    local archive=$1\n    local destdir=${2:-}\n    shift; shift || :\n    echo -e \"\\tUnpacking ${archive} to ${destdir}\"\n\n    echo -e \"\\tCreating temporary directory\"\n    local tmpdir=/mnt/server/tmp\n    if ! mkdir -p \"${tmpdir}\"; then\n        echo -e \"\\tERROR: mkdir failed to create temporary directory\"\n        return 1\n    fi\n\n    trap 'rm -rf -- \"$tmpdir\"' EXIT\n\n    echo -e \"\\tUnpacking archive\"\n\n    if ! unzip -q \"$archive\" -d \"$tmpdir\"; then\n        echo -e \"\\tERROR: unzip failed to unpack archive\"\n        return 1\n    fi\n\n    echo -e \"\\tSetting glob settings\"\n\n    shopt -s dotglob\n\n    echo -e \"\\tCleaning up directory structure\"\n\n    local files=(\"$tmpdir\"/*) name i=1\n\n    if (( ${#files[@]} == 1 )) && [[ -d \"${files[0]}\" ]]; then\n        name=$(basename \"${files[0]}\")\n        files=(\"$tmpdir\"/*/*)\n    else\n        name=$(basename \"$archive\"); name=${archive%.*}\n        files=(\"$tmpdir\"/*)\n    fi\n\n    if [[ -z \"$destdir\" ]]; then\n        destdir=./\"$name\"\n    fi\n\n    while [[ -f \"$destdir\" ]]; do\n        destdir=${destdir}-$((i++));\n    done\n\n    echo -e \"\\tCopying files to ${destdir}\"\n\n    mkdir -p \"$destdir\"\n    cp -ar \"$@\" -t \"$destdir\" -- \"${files[@]}\"\n    rm -rf \"$tmpdir\"\n)\n\nfunction unpack_zip {\n    echo -e \"Unpacking server files...\"\n    unzip-strip server.zip \"${SERVER_DIR}\"\n    rm -rf server.zip\n}\n\nfunction create_stylelabor_js {\n    local script_dir=\"${SERVER_DIR}/kubejs/server_scripts/StyleLabor\"\n    local script_file=\"${script_dir}/stylelabor.js\"\n\n\n    # Ensure the directory exists\n    mkdir -p \"$script_dir\"\n\n\n    # Create the stylelabor.js file\n    echo \"Creating stylelabor.js...\"\n    cat <<EOF > \"$script_file\"\n// priority: 100\n\nServerEvents.recipes((e) => {\n\te.remove({ output: 'industrialforegoing:infinity_nuke' });\ne.remove({ output: 'industrialforegoing:infinity_nuke' });\n});\n\nEOF\n    echo \"stylelabor.js created successfully.\"\n}\n\n\nfunction add_stylelabor_file {\n    local CONFIG_DIR=\"${SERVER_DIR}/config/ftbquests/quests/chapters\"\n    local FILE_PATH=\"${CONFIG_DIR}/stylelabor.snbt\"\n\n    echo \"Adding stylelabor.snbt file...\"\n\n    mkdir -p \"${CONFIG_DIR}\"\n\n    cat > \"${FILE_PATH}\" <<EOL\n{\n\tdefault_hide_dependency_lines: false\n\tdefault_quest_shape: \"rsquare\"\n\tfilename: \"stylelabor\"\n\tgroup: \"\"\n\ticon: {\n\t\tcomponents: {\n\t\t\t\"productivebees:gene_group\": {\n\t\t\t\tattribute: \"productivity\"\n\t\t\t\tpurity: 100\n\t\t\t\tvalue: \"productivity.medium\"\n\t\t\t}\n\t\t}\n\t\tid: \"productivebees:gene\"\n\t}\n\tid: \"7327DDFA32F13FDE\"\n\timages: [\n\t\t{\n\t\t\theight: 2.0d\n\t\t\timage: \"modern_industrialization:block/bronze_tank\"\n\t\t\trotation: 0.0d\n\t\t\twidth: 2.0d\n\t\t\tx: -0.5d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 1.0d\n\t\t\timage: \"modern_industrialization:item/high_pressure_water_bucket\"\n\t\t\trotation: -15.0d\n\t\t\twidth: 1.0d\n\t\t\tx: -0.75d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 1.0d\n\t\t\timage: \"the_bumblezone:item/honey_bucket\"\n\t\t\trotation: 0.0d\n\t\t\twidth: 1.0d\n\t\t\tx: -0.5d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 1.0d\n\t\t\timage: \"undergarden:item/virulent_mix_bucket\"\n\t\t\torder: -1\n\t\t\trotation: 15.0d\n\t\t\twidth: 1.0d\n\t\t\tx: -0.3d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 1.0d\n\t\t\timage: \"minecraft:textures/entity_icon/wandering_trader.png\"\n\t\t\trotation: 0.0d\n\t\t\twidth: 1.0d\n\t\t\tx: 3.0d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 2.0d\n\t\t\timage: \"modern_industrialization:block/aluminum_tank\"\n\t\t\trotation: 0.0d\n\t\t\twidth: 2.0d\n\t\t\tx: 3.0d\n\t\t\ty: -1.5d\n\t\t}\n\t\t{\n\t\t\theight: 1.0d\n\t\t\timage: \"integrateddynamics:aspect/write/double/effect/particle\"\n\t\t\trotation: 0.0d\n\t\t\twidth: 1.0d\n\t\t\tx: 3.5d\n\t\t\ty: -2.0d\n\t\t}\n\t]\n\torder_index: 3\n\tquest_links: [ ]\n\tquests: [\n\t\t{\n\t\t\ticon: {\n\t\t\t\tid: \"mekanism:brine_bucket\"\n\t\t\t}\n\t\t\tid: \"7863395A0E5C7B3F\"\n\t\t\trewards: [{\n\t\t\t\tid: \"2A0B8043D4499DDD\"\n\t\t\t\titem: {\n\t\t\t\t\tcomponents: {\n\t\t\t\t\t\t\"mekanism:fluids\": {\n\t\t\t\t\t\t\tfluid_tanks: [{\n\t\t\t\t\t\t\t\tamount: 2147483647\n\t\t\t\t\t\t\t\tid: \"mekanism:brine\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcount: 1\n\t\t\t\t\tid: \"mekanism:creative_fluid_tank\"\n\t\t\t\t}\n\t\t\t\ttype: \"item\"\n\t\t\t}]\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 20000L\n\t\t\t\t\tid: \"1F14FF6BCED502A7\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:thermal_evaporation_block\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 5000L\n\t\t\t\t\tid: \"5405DCFB5603A776\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:thermal_evaporation_controller\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 1000L\n\t\t\t\t\tid: \"24E7A5E998F56186\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_mechanical_pipe\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 512L\n\t\t\t\t\tid: \"5397B6176040FCAC\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_fluid_tank\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t]\n\t\t\tx: -1.5d\n\t\t\ty: 0.0d\n\t\t}\n\t\t{\n\t\t\ticon: {\n\t\t\t\tid: \"mekanism:lithium_bucket\"\n\t\t\t}\n\t\t\tid: \"386D5A7E39587927\"\n\t\t\trewards: [{\n\t\t\t\tid: \"0C12E1A72E494AEE\"\n\t\t\t\titem: {\n\t\t\t\t\tcomponents: {\n\t\t\t\t\t\t\"mekanism:fluids\": {\n\t\t\t\t\t\t\tfluid_tanks: [{\n\t\t\t\t\t\t\t\tamount: 2147483647\n\t\t\t\t\t\t\t\tid: \"mekanism:lithium\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcount: 1\n\t\t\t\t\tid: \"mekanism:creative_fluid_tank\"\n\t\t\t\t}\n\t\t\t\ttype: \"item\"\n\t\t\t}]\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 20000L\n\t\t\t\t\tid: \"3D5DAAEAF0D2ED22\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:thermal_evaporation_block\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 5000L\n\t\t\t\t\tid: \"238D6C598F836D0E\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:thermal_evaporation_controller\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 1000L\n\t\t\t\t\tid: \"15A9E00E7F7E8015\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_mechanical_pipe\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 512L\n\t\t\t\t\tid: \"7568A2F32C966835\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_fluid_tank\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t]\n\t\t\tx: 0.5d\n\t\t\ty: 0.0d\n\t\t}\n\t\t{\n\t\t\ticon: {\n\t\t\t\tid: \"mekanism:heavy_water_bucket\"\n\t\t\t}\n\t\t\tid: \"18D10D694533DEBF\"\n\t\t\trewards: [{\n\t\t\t\tid: \"726DB0B92565CD5A\"\n\t\t\t\titem: {\n\t\t\t\t\tcomponents: {\n\t\t\t\t\t\t\"mekanism:fluids\": {\n\t\t\t\t\t\t\tfluid_tanks: [{\n\t\t\t\t\t\t\t\tamount: 2147483647\n\t\t\t\t\t\t\t\tid: \"mekanism:heavy_water\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcount: 1\n\t\t\t\t\tid: \"mekanism:creative_fluid_tank\"\n\t\t\t\t}\n\t\t\t\ttype: \"item\"\n\t\t\t}]\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 10000L\n\t\t\t\t\tid: \"30B7FEBA6A3F1308\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_mechanical_pipe\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 25000L\n\t\t\t\t\tid: \"5C55EE06104C4BC8\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:electric_pump\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 5000L\n\t\t\t\t\tid: \"5A9DC1F63A493011\"\n\t\t\t\t\titem: { count: 1, id: \"minecraft:bucket\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 1024L\n\t\t\t\t\tid: \"2F858DD41A566E30\"\n\t\t\t\t\titem: { count: 1, id: \"mekanism:ultimate_fluid_tank\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 1024L\n\t\t\t\t\tid: \"418C33EA2927DE19\"\n\t\t\t\t\titem: { count: 1, id: \"minecraft:water_bucket\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t]\n\t\t\tx: -0.5d\n\t\t\ty: 0.0d\n\t\t}\n\t\t{\n\t\t\tcan_repeat: true\n\t\t\ticon: {\n\t\t\t\tid: \"alltheores:raw_uranium\"\n\t\t\t}\n\t\t\tid: \"46F86E4EE855C4B9\"\n\t\t\trewards: [{\n\t\t\t\tid: \"443162A668E66637\"\n\t\t\t\titem: {\n\t\t\t\t\tcount: 1\n\t\t\t\t\tid: \"mysticalagriculture:uranium_seeds\"\n\t\t\t\t}\n\t\t\t\ttype: \"item\"\n\t\t\t}]\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 4L\n\t\t\t\t\tid: \"7FD0DAE819403822\"\n\t\t\t\t\titem: { count: 1, id: \"alltheores:uranium_block\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tcount: 4L\n\t\t\t\t\tid: \"4440B42307068A00\"\n\t\t\t\t\titem: { count: 4, id: \"mysticalagriculture:imperium_block\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconsume_items: true\n\t\t\t\t\tid: \"7462C0B908D3B1AD\"\n\t\t\t\t\titem: { count: 1, id: \"mysticalagriculture:prosperity_seed_base\" }\n\t\t\t\t\ttype: \"item\"\n\t\t\t\t}\n\t\t\t]\n\t\t\tx: 3.0d\n\t\t\ty: 0.0d\n\t\t}\n\t]\n}\n\nEOL\n\n    echo \"stylelabor.snbt file added successfully.\"\n}\n\n\nfunction json_download_mods {\n    echo \"Downloading mods...\"\n\n    local MANIFEST=\"${SERVER_DIR}/manifest.json\"\n    jq -c '.files[]? | select(.required == true) | {project: .projectID, file: .fileID}' \"${MANIFEST}\" | while read -r mod; do\n        local MOD_PROJECT_ID=$(echo \"${mod}\" | jq -r '.project // empty')\n        local MOD_FILE_ID=$(echo \"${mod}\" | jq -r '.file // empty')\n\n        if [[ -z \"${MOD_PROJECT_ID}\" || -z \"${MOD_FILE_ID}\" ]]; then\n            echo -e \"\\tERROR: Failed to parse project id or file id for mod '${mod}'\"\n            exit 1\n        fi\n\n        local FILE_URL=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${MOD_PROJECT_ID}/files/${MOD_FILE_ID}/download-url\" -O - | jq -r '.data // empty')\n\n        if [[ -z \"${FILE_URL}\" ]]; then\n            echo -e \"\\tERROR: No download url found for mod ${MOD_PROJECT_ID} ${MOD_FILE_ID}\"\n            exit 1\n        fi\n\n        echo -e \"\\tDownloading ${FILE_URL}\"\n\n        if ! wget -q \"${FILE_URL}\" -P \"${SERVER_DIR}/mods\"; then\n            echo -e \"\\tERROR: Failed to download mod ${MOD_PROJECT_ID} ${MOD_FILE_ID}\"\n            exit 1\n        fi\n    done\n}\n\nfunction json_download_overrides {\n    echo \"Copying overrides...\"\n    if [[ -d \"${SERVER_DIR}/overrides\" ]]; then\n        cp -r \"${SERVER_DIR}/overrides/\"* \"${SERVER_DIR}\"\n        rm -r \"${SERVER_DIR}/overrides\"\n    fi\n}\n\nFORGE_INSTALLER_URL=\"https://maven.minecraftforge.net/net/minecraftforge/forge/\"\n\nfunction json_download_forge {\n    echo \"Downloading Forge...\"\n\n    local MC_VERSION=$MINECRAFT_VERSION\n    local FORGE_VERSION=$LOADER_VERSION\n\n    FORGE_VERSION=\"${MC_VERSION}-${FORGE_VERSION}\"\n    if [[ \"${MC_VERSION}\" == \"1.7.10\" || \"${MC_VERSION}\" == \"1.8.9\" ]]; then\n        FORGE_VERSION=\"${FORGE_VERSION}-${MC_VERSION}\"\n    fi\n\n    local FORGE_JAR=\"forge-${FORGE_VERSION}.jar\"\n    if [[ \"${MC_VERSION}\" == \"1.7.10\" ]]; then\n        FORGE_JAR=\"forge-${FORGE_VERSION}-universal.jar\"\n    fi\n\n    local FORGE_URL=\"${FORGE_INSTALLER_URL}${FORGE_VERSION}/forge-${FORGE_VERSION}\"\n\n    echo -e \"\\tUsing Forge ${FORGE_VERSION} from ${FORGE_URL}\"\n\n    local FORGE_INSTALLER=\"${FORGE_URL}-installer.jar\"\n    echo -e \"\\tDownloading Forge Installer ${FORGE_VERSION} from ${FORGE_INSTALLER}\"\n\n    if ! wget -q -O forge-installer.jar \"${FORGE_INSTALLER}\"; then\n        echo -e \"\\tERROR: Failed to download Forge Installer ${FORGE_VERSION}\"\n        exit 1\n    fi\n\n    # Remove old Forge files so we can safely update\n    rm -rf libraries/net/minecraftforge/forge/\n    rm -f unix_args.txt\n\n    echo -e \"\\tInstalling Forge Server ${FORGE_VERSION}\"\n    if ! java -jar forge-installer.jar --installServer > /dev/null 2>&1; then\n        echo -e \"\\tERROR: Failed to install Forge Server ${FORGE_VERSION}\"\n        exit 1\n    fi\n\n    if [[ $MC_VERSION =~ ^1\\.(17|18|19|20|21|22|23) || $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\n        echo -e \"\\tDetected Forge 1.17 or newer version. Setting up Forge Unix arguments\"\n        ln -sf libraries/net/minecraftforge/forge/*/unix_args.txt unix_args.txt\n    else\n        mv \"$FORGE_JAR\" forge-server-launch.jar\n        echo \"forge-server-launch.jar\" > \".serverjar\"\n    fi\n\n    rm -f forge-installer.jar\n}\n\nFABRIC_INSTALLER_URL=\"https://meta.fabricmc.net/v2/versions/installer\"\n\nfunction json_download_fabric {\n    echo \"Downloading Fabric...\"\n\n    local MC_VERSION=$MINECRAFT_VERSION\n    local FABRIC_VERSION=$LOADER_VERSION\n\n    local INSTALLER_JSON=$(wget -q -O - ${FABRIC_INSTALLER_URL} )\n    local INSTALLER_VERSION=$(echo \"$INSTALLER_JSON\" | jq -r '.[0].version // empty')\n    local INSTALLER_URL=$(echo \"$INSTALLER_JSON\" | jq -r '.[0].url // empty')\n\n    if [[ -z \"${INSTALLER_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No Fabric installer version found\"\n        exit 1\n    fi\n\n    if [[ -z \"${INSTALLER_URL}\" ]]; then\n        echo -e \"\\tERROR: No Fabric installer url found\"\n        exit 1\n    fi\n\n    echo -e \"\\tDownloading Fabric Installer ${MC_VERSION}-${FABRIC_VERSION} (${INSTALLER_VERSION}) from ${INSTALLER_URL}\"\n\n    if ! wget -q -O fabric-installer.jar \"${INSTALLER_URL}\"; then\n        echo -e \"\\tERROR: Failed to download Fabric Installer ${MC_VERSION}-${FABRIC_VERSION} (${INSTALLER_VERSION})\"\n        exit 1\n    fi\n\n    echo -e \"\\tInstalling Fabric Server ${MC_VERSION}-${FABRIC_VERSION} (${INSTALLER_VERSION})\"\n    if ! java -jar fabric-installer.jar server -mcversion \"${MC_VERSION}\" -loader \"${FABRIC_VERSION}\" -downloadMinecraft; then\n        echo -e \"\\tERROR: Failed to install Fabric Server ${MC_VERSION}-${FABRIC_VERSION} (${INSTALLER_VERSION})\"\n        exit 1\n    fi\n\n    echo \"fabric-server-launch.jar\" > \".serverjar\"\n\n    rm -f fabric-installer.jar\n}\n\nfunction json_download_neoforge {\n    echo \"Downloading NeoForge...\"\n\n    local MC_VERSION=$MINECRAFT_VERSION\n    local NEOFORGE_VERSION=$LOADER_VERSION\n\n    # Remove spaces from the version number to avoid issues with curl\n    NEOFORGE_VERSION=\"$(echo \"$NEOFORGE_VERSION\" | tr -d ' ')\"\n    MC_VERSION=\"$(echo \"$MC_VERSION\" | tr -d ' ')\"\n\n    if [[ ! -z ${NEOFORGE_VERSION} ]]; then\n        if [[ ${NEOFORGE_VERSION} =~ 1\\.20\\.1- ]]; then\n            DOWNLOAD_LINK=\"https://maven.neoforged.net/releases/net/neoforged/forge/${NEOFORGE_VERSION}/forge-${NEOFORGE_VERSION}\"\n            ARTIFACT_NAME=\"forge\"\n        else\n            DOWNLOAD_LINK=\"https://maven.neoforged.net/releases/net/neoforged/neoforge/${NEOFORGE_VERSION}/neoforge-${NEOFORGE_VERSION}\"\n            ARTIFACT_NAME=\"neoforge\"\n        fi\n    else\n        if [[ ${MC_VERSION} =~ 1\\.20\\.1 ]]; then\n            XML_DATA=$(curl -sSL https://maven.neoforged.net/releases/net/neoforged/forge/maven-metadata.xml)\n            ARTIFACT_NAME=\"forge\"\n            NEOFORGE_OLD=1\n        else\n            XML_DATA=$(curl -sSL https://maven.neoforged.net/releases/net/neoforged/neoforge/maven-metadata.xml)\n            ARTIFACT_NAME=\"neoforge\"\n        fi\n\n        REPO_URL=\"https://maven.neoforged.net/releases/net/neoforged/${ARTIFACT_NAME}/\"\n\n        if [[ ${MC_VERSION} =~ latest || ${MC_VERSION} == \"\" ]]; then\n            echo \"Getting latest version of NeoForge.\"\n            MC_VERSION=\"1.$(echo -e ${XML_DATA} | xq -x '/metadata/versioning/release' | cut -d'.' -f1-2)\"\n        fi\n\n        echo \"Minecraft version: ${MC_VERSION}\"\n\n        if [[ -z \"${NEOFORGE_OLD}\" ]]; then\n            VERSION_KEY=$(echo -n ${MC_VERSION} | cut -d'.' -f2-)\n        else\n            VERSION_KEY=\"${MC_VERSION}-\"\n        fi\n\n        NEOFORGE_VERSION=$(echo -e ${XML_DATA} | xq -x \"(/metadata/versioning/versions/*[starts-with(text(), '${VERSION_KEY}')])\" | tail -n1)\n        if [[ -z \"${NEOFORGE_VERSION}\" ]]; then\n            echo \"The install failed, because there is no valid version of NeoForge for the version of Minecraft selected.\"\n            exit 1\n        fi\n\n        echo \"NeoForge version: ${NEOFORGE_VERSION}\"\n\n        DOWNLOAD_LINK=\"${REPO_URL}${NEOFORGE_VERSION}/${ARTIFACT_NAME}-${NEOFORGE_VERSION}\"\n    fi\n\n    echo \"Downloading NeoForge version ${NEOFORGE_VERSION}\"\n    echo \"Download link is ${DOWNLOAD_LINK}\"\n\n    if [[ ! -z \"${DOWNLOAD_LINK}\" ]]; then\n        if curl --output /dev/null --silent --head --fail ${DOWNLOAD_LINK}-installer.jar; then\n            echo -e \"Installer jar download link is valid.\"\n        else\n            echo -e \"Link is invalid. Exiting now\"\n            exit 2\n        fi\n    else\n        echo -e \"No download link provided. Exiting now\"\n        exit 3\n    fi\n\n    local INSTALLER_JAR=\"neoforge-${NEOFORGE_VERSION}-installer.jar\"\n    local INSTALLER_LOG=\"installer.jar.log\"\n\n    curl -s -o ${INSTALLER_JAR} -sS ${DOWNLOAD_LINK}-installer.jar\n\n    if [[ ! -f ./${INSTALLER_JAR} ]]; then\n        echo \"!!! Error downloading NeoForge version ${NEOFORGE_VERSION} !!!\"\n        exit 4\n    fi\n\n    rm -rf libraries/net/neoforged/${ARTIFACT_NAME}\n    rm unix_args.txt\n\n    echo -e \"Installing NeoForge server.\\n\"\n    if ! java -jar ${INSTALLER_JAR} --installServer > ${INSTALLER_LOG} 2>&1; then\n        echo -e \"\\nInstall failed using NeoForge version ${NEOFORGE_VERSION} and Minecraft version ${MINECRAFT_VERSION}.\"\n        exit 5\n    fi\n\n    ln -sf libraries/net/neoforged/${ARTIFACT_NAME}/*/unix_args.txt unix_args.txt\n\n    echo -e \"Deleting ${INSTALLER_JAR} and ${INSTALLER_LOG} files.\\n\"\n    rm -rf ${INSTALLER_JAR} ${INSTALLER_LOG}\n\n    echo \"Installation process is completed!\"\n}\n\nQUILT_INSTALLER_URL=\"https://meta.quiltmc.org/v3/versions/installer\"\n\nfunction json_download_quilt {\n    echo \"Downloading Quilt...\"\n\n    local MC_VERSION=$MINECRAFT_VERSION\n    local QUILT_VERSION=$LOADER_VERSION\n\n    local INSTALLER_JSON=$(wget -q -O - ${QUILT_INSTALLER_URL} )\n    local INSTALLER_VERSION=$(echo \"$INSTALLER_JSON\" | jq -r '.[0].version // empty')\n    local INSTALLER_URL=$(echo \"$INSTALLER_JSON\" | jq -r '.[0].url // empty')\n\n    if [[ -z \"${INSTALLER_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No Quilt installer version found\"\n        exit 1\n    fi\n\n    if [[ -z \"${INSTALLER_URL}\" ]]; then\n        echo -e \"\\tERROR: No Quilt installer URL found\"\n        exit 1\n    fi\n\n    echo -e \"\\tDownloading Quilt Installer ${MC_VERSION}-${QUILT_VERSION} (${INSTALLER_VERSION}) from ${INSTALLER_URL}\"\n\n    if ! wget -q -O quilt-installer.jar \"${INSTALLER_URL}\"; then\n        echo -e \"\\tERROR: Failed to download Quilt Installer ${MC_VERSION}-${QUILT_VERSION} (${INSTALLER_VERSION})\"\n        exit 1\n    fi\n\n    echo -e \"\\tInstalling Quilt Server ${MC_VERSION}-${QUILT_VERSION} (${INSTALLER_VERSION})\"\n    if ! java -jar quilt-installer.jar install server \"${MC_VERSION}\" \"${QUILT_VERSION}\" --download-server --install-dir=./; then\n        echo -e \"\\tERROR: Failed to install Quilt Server ${MC_VERSION}-${QUILT_VERSION} (${INSTALLER_VERSION})\"\n        exit 1\n    fi\n\n    echo \"quilt-server-launch.jar\" > \".serverjar\"\n\n    rm quilt-installer.jar\n}\n\nfunction clean_mods_folder {\n    local MODS_DIR=\"${SERVER_DIR}/mods\"\n    if [[ -d \"${MODS_DIR}\" ]]; then\n        echo \"Deleting existing mods folder...\"\n        rm -rf \"${MODS_DIR}\"\n    fi\n}\n\nclean_mods_folder\ninstall_required\n\nif [[ -z \"${PROJECT_ID}\" ]]; then\n    echo \"ERROR: You must specify a PROJECT_ID environment variable!\"\n    exit 1\nfi\n\nif [[ ! \"${PROJECT_ID}\" = \"zip\" ]]; then\n    get_download\nfi\n\nget_loader\nunpack_zip\n\nif [[ -f \"${SERVER_DIR}/manifest.json\" ]]; then\n    echo \"Found manifest.json, installing mods\"\n    json_download_mods\n    json_download_overrides\nfi\n\nif [[ -f \"${SERVER_DIR}/client.manifest.json\" ]]; then\n    MANIFEST=\"${SERVER_DIR}/client.manifest.json\"\n\n    if [[ $LOADER_NAME == \"forge\" ]]; then\n        json_download_forge\n    fi\n\n    if [[ $LOADER_NAME == \"fabric\" ]]; then\n        json_download_fabric\n    fi\n\n    if [[ $LOADER_NAME == \"quilt\" ]]; then\n        json_download_quilt\n    fi\n\n    if [[ $LOADER_NAME == \"neoforge\" ]]; then\n        json_download_neoforge\n    fi\nfi\n\ndownload_extra_mods\nadd_stylelabor_file\n\n# Create stylelabor.js\ncreate_stylelabor_js\n\necho -e \"\\nInstall completed successfully, enjoy!\""
    }
  },
  "variables": [
    {
      "name": "Modpack Project ID",
      "description": "The modpack project ID from the CurseForge site on the pack page, or 'zip' if installing from an uploaded server.zip file.\r\n\r\nFor example, the project Id of https://www.curseforge.com/minecraft/modpacks/bofa-mods ID is 375152",
      "env_variable": "PROJECT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Modpack File ID",
      "description": "The file ID belonging to a specific version of a modpack. Can either be the main file or the file ID associated with the server pack.\r\n\r\nIf not provided the script will attempt to retrieve the latest server pack or client pack available.",
      "env_variable": "VERSION_ID",
      "default_value": "latest",
      "user_viewable": true,
      "user_editable": true,
      "rules": "string",
      "field_type": "text"
    },
    {
      "name": "CurseForge API Key",
      "description": "A CurseForge API key is required to use this egg. You can learn how to get an API key here: https://support.curseforge.com/en/support/solutions/articles/9000208346-about-the-curseforge-api-and-how-to-apply-for-a-key",
      "env_variable": "API_KEY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:60",
      "field_type": "text"
    }
  ]
}